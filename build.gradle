buildscript {
	ext {
		springBootVersion = '2.0.0.M6'
	}
	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

jar {
	baseName = 'bullshit-app'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

dependencies {
	runtime('org.springframework.boot:spring-boot-devtools')

	compile('org.springframework.session:spring-session-core')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile group: 'io.javaslang', name: 'javaslang', version: '2.0.5'
	compile group: 'com.google.guava', name: 'guava', version: '21.0'
	compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1201-jdbc4'
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'

	runtime group: 'com.h2database', name: 'h2', version: '1.4.193'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

repositories {
	mavenCentral()
	jcenter()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

bootRun {
	execSpec {
		systemProperties System.properties
	}
}

task buildDocker(type: Docker, group: docker, dependsOn: build) {
	push = false
	applicationName = jar.baseName
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}

task dockerCompose(type:Exec, group: docker) {
	//on windows:
	commandLine 'cmd', '/c', 'docker-compose up'

	//store the output instead of printing to the console:
	standardOutput = new ByteArrayOutputStream()

	//extension method stopTomcat.output() can be used to obtain the output:
	ext.output = {
		return standardOutput.toString()
	}
}
